# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    - name : Make application.properties
      run: |
         cd ./src/main/resources
         touch ./application.properties
         touch ./jwt.properties        
         echo "${{ secrets.PROPERTIES }}" > ./application.properties
         echo "${{ secrets.JWT_KEY }}" > ./jwt.properties
      shell: bash

    - name: Decode and create keystore.p12
      env:
        KEY_P12_BASE64: ${{ secrets.SSL_KEY }}
      run: |
        cd ./src/main/resources
        touch ./keystore.p12
        echo -n "$KEY_P12_BASE64" | base64 --decode > ./keystore.p12
      shell : bash
    
    - name: give permission
      run : chmod +x ./gradlew
      
    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/server:springmvc .

    - name: docker login
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKERHUB_USERID }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/server:springmvc

        # GitHub Actions VM 환경의 IP를 받아온다.
    - name: Get Public IP
      id: ip
      uses: haythem/public-ip@v1.3

# AWS 인증 관련 옵션을 추가한다.
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'ap-northeast-2'

# GitHub Actions VM 환경의 IP를 인바운드 규칙에 추가한다.
    - name: Add GitHub Actions IP
      run: |
        aws ec2 authorize-security-group-ingress \
        --group-id ${{ secrets.SECURITY_GROUP_ID }} \
        --protocol tcp \
        --port 22 \
        --cidr ${{ steps.ip.outputs.ipv4 }}/32

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_SSH_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
          
          if [ ! -z "$CONTAINER_ID" ]; then
            sudo docker stop mvccon
            sudo docker rm $CONTAINER_ID
          fi
          sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/server:springmvc
          sudo docker run --name mvccon -d -p 8080:8080 -e TZ=Asia/Seoul --add-host host.docker.internal:host-gateway ${{ secrets.DOCKERHUB_USERNAME }}/server:springmvc

      # GitHub Actions VM 환경의 IP를 인바운드 규칙에서 제거한다.
    - name: Remove GitHub Actions IP
      run: |
        aws ec2 revoke-security-group-ingress \
        --group-id ${{ secrets.SECURITY_GROUP_ID }} \
        --protocol tcp \
        --port 22 \
        --cidr ${{ steps.ip.outputs.ipv4 }}/32